Background
==========
This project was written for my High Performance Computing class.  For this project, we are computing the solution to the Poisson equation of two different problems.  Specifications can be found in project-1.pdf .

The program is ran on a verification problem to ensure the program works as intended, which it does.  Additionally, the program is ran on a unique problem to see if the correct solution is found.  

Finally, both the Gauss-Seidel and Jacobi algorithms are implemented to solve both of the above problems.  Gauss-Seidel solves the system of linear equations by computing new values of the grid using old and new values on an iteration by iteration basis.  As such, it is an in-place algorithm.  In the Jacobi algorithm, a new matrix is created in memory for every iteration of the weights in the system of linear equations, and all new values in iteration (i+1) are computed from old values of iteration (i).  As such, it is not an in-place algorithm.

This program showcases the beauty of numerical analysis and the use of powerful machines to solve complex mathematical equations, namely through the two aforementioned algorithms, with a second-derivative approximation as shown in the project-1.pdf .

Tools/Requirements
==================

C++ compiler (g++ recommended)
Paraview ( https://www.paraview.org/ )

Setup/Run instructions
==================
Begin on a machine with a Unix/OSX/Windows machine
Run `g++ poisson.cpp` to compile the program
In order to run the program:
	- `a.exe` on Windows
	- `./a.out` on any other machine
When prompted, enter the x dimension of the solution's grid.  The output looks better if the dimension is odd (i.e. 5, 11, 21, ...), but that's not a strict requirement.
When prompted, enter the y dimension of the solution's grid.  The output looks better if the dimension is odd (i.e. 5, 11, 21, ...), but that's not a strict requirement.
	- Output looks nicer if x = y (i.e. a grid of size 5x5, 11x11, 41x41, ...), but that's not a requirement.
Wait for the output to be printed to the user

Output
======
There are comments within the source code.  Two files are provided with this .zip submission.  One file, out1.vtk (should look more like a square since the constraints are 0 <= x <= 1 and 0 <= y <= 1), is the solution from the problem solving problem, while out2.vtk (looks like a rectangle since the constraints are 0 <= x <= 2 and 0 <= y <= 1) is the solution to the verification problem.  Both solutions can be viewed in the included .png files or by opening Paraview, opening each file, and clicking the green 'Apply' button.  If you desire these files to be generated by the program, uncomment the commented headers and the necessary lines with main(), which calls a function from vtk.c and outputs the file out1.vtk .  Watch out, this file (out1.vtk) will be overwritten every time VTK_out is called.